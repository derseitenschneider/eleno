import type React from 'react'
import type { Database } from './supabase'

/*
|--------------------------------------------------------------------------
| Type helpers
|--------------------------------------------------------------------------
|
| Some type helpers mainly to transform the generated supabase types into
| more usable ones types.
|
*/

// Get easier access to generated types.
export type DBTypes = {
  [P in keyof Database['public']['Tables']]: Database['public']['Tables'][P]['Row']
} & {
  [P in keyof Database['public']['Views']]: Database['public']['Views'][P]['Row']
}

// Removes null except for defined fields
type RemoveNullExcept<T, E extends keyof T = never> = {
  [P in keyof T]: P extends E ? T[P] : Exclude<T[P], null>
}

// Transform fields (E) from type (T) to new type (N).
type TransformFields<T, N, E extends keyof T = never> = {
  [P in keyof T]: P extends E ? N : T[P]
}

/*
|--------------------------------------------------------------------------
| Lesson Types
|--------------------------------------------------------------------------
*/

// Change date property to from string to Date.
export type DbLesson = TransformFields<DBTypes['lessons'], Date, 'date'>

// Create helper types for lessons to have either studentId or groupId
type LessonWithStudentId = Omit<DbLesson, 'studentId' | 'groupId'> & {
  studentId: number
  groupId?: null
}
type LessonWithGroupId = Omit<DbLesson, 'studentId' | 'groupId'> & {
  studentId?: null
  groupId: number
}

export type Lesson = LessonWithStudentId | LessonWithGroupId

// This type is only for creating a lesson since the omitted types are
// automatically generated by supabase.
export type LessonPartial = Omit<
  Lesson,
  'id' | 'homeworkKey' | 'user_id' | 'created_at'
>

// Draft type derived from Lesson type.
export type Draft = Partial<
  Omit<Lesson, 'created_at' | 'homeworkKey' | 'id' | 'user_id'>
>

/*
|--------------------------------------------------------------------------
| Student Types
|--------------------------------------------------------------------------
*/

export type Student = DBTypes['students']

// This type is only for creating a student since the omitted types are
// automatically generated by supabase.
export type StudentPartial = Omit<
  Student,
  'id' | 'created_at' | 'user_id' | 'archive'
>
export type Weekday = DBTypes['students']['dayOfLesson']

/*
|--------------------------------------------------------------------------
| Group Types
|--------------------------------------------------------------------------
*/
export type Group = Omit<DBTypes['groups'], 'students'> & {
  students: Array<{ name: string }>
}

export type GroupPartial = Omit<
  Group,
  'id' | 'created_at' | 'user_id' | 'archive'
>

/*
|--------------------------------------------------------------------------
| Lessonholder Types
|--------------------------------------------------------------------------
*/

export type LessonHolder =
  | { type: 's'; holder: Student }
  | { type: 'g'; holder: Group }

/*
|--------------------------------------------------------------------------
| User Types
|--------------------------------------------------------------------------
*/

export type User = DBTypes['profiles']

export type Profile = Pick<User, 'first_name' | 'last_name'>

/*
|--------------------------------------------------------------------------
| Notes Types
|--------------------------------------------------------------------------
*/

export type NotesBackgrounds = DBTypes['notes']['backgroundColor']

export type DbNote = DBTypes['notes']

type NoteWithStudentId = Omit<DbNote, 'studentId' | 'groupId'> & {
  studentId: number
  groupId?: never
}
type NoteWithGroupId = Omit<DbNote, 'studentId' | 'groupId'> & {
  studentId?: never
  groupId: number
}

export type Note = NoteWithStudentId | NoteWithGroupId

export type PartialNote = Omit<Note, 'created_at'>

// CONTEXT TYPES
export type ContextTypeUser = {
  user: User | null
  setUser: React.Dispatch<React.SetStateAction<User>>

  updateProfile: (data: Profile) => Promise<void>
  updateEmail: (email: string) => Promise<void>
  updatePassword: (password: string) => Promise<void>
  deleteAccount: () => Promise<void>
  logout: () => Promise<void>
  recoverPassword: (email: string) => Promise<void>
}

export type ContextTypeTodos = {
  todos: TTodoItem[] | null
  setTodos: React.Dispatch<React.SetStateAction<TTodoItem[]>>
  overdueTodos: TTodoItem[] | null
  saveTodo: (newTodo: TTodoItem) => Promise<void>
  deleteTodo: (id: number) => Promise<void>
  completeTodo: (id: number) => Promise<void>
  reactivateTodo: (id: number) => Promise<void>
  deleteAllCompleted: () => Promise<void>
  updateTodo: (editedTodo: TTodoItem) => Promise<void>
}

export type ContextTypeStudents = {
  currentStudentIndex: number
  setCurrentStudentIndex: React.Dispatch<React.SetStateAction<number>>
  currentStudentId?: number
  activeStudents?: Student[] | null
  inactiveStudents?: Student[] | null
  activeSortedStudentIds: number[]
}

export type ContextTypeLessons = {
  drafts: Draft[]
  setDrafts: React.Dispatch<React.SetStateAction<Draft[]>>
}

export type ContextTypeLoading = {
  isLoading: boolean | null
  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>
}

export type ContextTypeNotes = {
  notes: Note[] | null
  setNotes: React.Dispatch<React.SetStateAction<Note[]>>
  saveNote: (note: Note) => Promise<void>
  deleteNote: (id: number) => Promise<void>
  updateNotes: (notes: Note[]) => Promise<void>
  duplicateNote: (original: Note) => Promise<void>
}

export type ContextTypeDateToday = {
  dateToday: string
}

export type SortingMethods =
  | 'firstName'
  | 'lastName'
  | 'instrument'
  | 'dayOfLesson'
  | 'location'
  | 'duration'

export type Sorting = {
  sort: string
  ascending: boolean
}

export type TimetableDay = {
  day: string
  lessonHolders: LessonHolder[]
}

/*
|--------------------------------------------------------------------------
| Todo Types
|--------------------------------------------------------------------------
*/
export type DbTodoItem = TransformFields<
  DBTypes['todos'],
  Date | undefined,
  'due'
>

type TodoItemWithStudentId = Omit<DbTodoItem, 'studentId' | 'groupId'> & {
  studentId: number
  groupId?: null
}

type TodoItemWithGroupId = Omit<DbTodoItem, 'studentId' | 'groupId'> & {
  studentId?: null
  groupId: number
}

type TodoItemWithoutHolder = Omit<DbTodoItem, 'studentId' | 'groupId'> & {
  studentId: number | null | undefined
  groupId: number | null | undefined
}

export type TTodoItem =
  | TodoItemWithGroupId
  | TodoItemWithStudentId
  | TodoItemWithoutHolder

// This type is only for creating a repertoire item since the omitted types are
// automatically generated by supabase.
export type PartialTodoItem = Omit<TTodoItem, 'id' | 'user_id' | 'created_at'>

/*
|--------------------------------------------------------------------------
| News Types
|--------------------------------------------------------------------------
*/
export type News = {
  date: string
  title: string
  text: string
}

/*
|--------------------------------------------------------------------------
| Repertoire Types
|--------------------------------------------------------------------------
*/

// Derives type from generated type and transforms date fields.
export type DbRepertoireItem = TransformFields<
  DBTypes['repertoire'],
  Date | undefined,
  'startDate' | 'endDate'
>

type RepertoireItemWithStudentId = Omit<
  DbRepertoireItem,
  'studentId' | 'groupId'
> & {
  studentId: number
  groupId?: null
}

type RepertoireItemWithGroupId = Omit<
  DbRepertoireItem,
  'studentId' | 'groupId'
> & {
  studentId?: null
  groupId: number
}
export type RepertoireItem =
  | RepertoireItemWithStudentId
  | RepertoireItemWithGroupId

// This type is only for creating a repertoire item since the omitted types are
// automatically generated by supabase.
export type PartialRepertoireItem = Omit<
  RepertoireItem,
  'id' | 'user_id' | 'created_at'
>
