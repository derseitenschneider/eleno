# Deploys the application from [main] to production.
# Deployment is blocked if tests fail.

name: 📱 [PRODUCTION] Deploy application on push main
on:
  push:
    branches:
      - main
    paths:
      - "app/**"
  workflow_run:
    workflows: ["🧪 Comprehensive Test Suite"]
    types:
      - completed
    branches:
      - main

jobs:
  # Check if tests passed for this commit
  check-tests:
    name: 🧪 Verify Tests Passed
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    outputs:
      tests-passed: ${{ steps.check-status.outputs.tests-passed }}
      deployment-allowed: ${{ steps.check-status.outputs.deployment-allowed }}
    steps:
      - name: 🚚 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check test status
        id: check-status
        run: |
          # If triggered by push, wait for tests to complete
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "🔄 Push event detected - will check test status"
            echo "tests-passed=pending" >> $GITHUB_OUTPUT
            echo "deployment-allowed=false" >> $GITHUB_OUTPUT
          else
            # Triggered by workflow_run completion
            if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
              echo "✅ Tests passed for commit ${{ github.event.workflow_run.head_sha }}"
              echo "tests-passed=true" >> $GITHUB_OUTPUT
              echo "deployment-allowed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Tests failed for commit ${{ github.event.workflow_run.head_sha }}"
              echo "tests-passed=false" >> $GITHUB_OUTPUT
              echo "deployment-allowed=false" >> $GITHUB_OUTPUT
            fi
          fi

  # Wait for tests if triggered by push
  wait-for-tests:
    name: ⏳ Wait for Tests
    runs-on: ubuntu-latest
    needs: check-tests
    if: needs.check-tests.outputs.tests-passed == 'pending'
    steps:
      - name: 🚚 Checkout code
        uses: actions/checkout@v4

      - name: ⏳ Wait for test completion
        id: wait-tests
        uses: actions/github-script@v7
        with:
          script: |
            const maxWaitTime = 30 * 60 * 1000; // 30 minutes
            const pollInterval = 30 * 1000; // 30 seconds
            const startTime = Date.now();
            
            console.log('🔄 Waiting for test workflow to complete...');
            
            while (Date.now() - startTime < maxWaitTime) {
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'test.yml',
                head_sha: context.sha,
                per_page: 1
              });
              
              if (runs.workflow_runs.length > 0) {
                const run = runs.workflow_runs[0];
                console.log(`📊 Test workflow status: ${run.status} (${run.conclusion})`);
                
                if (run.status === 'completed') {
                  if (run.conclusion === 'success') {
                    console.log('✅ Tests passed! Deployment can proceed.');
                    core.setOutput('tests-passed', 'true');
                    return;
                  } else {
                    console.log('❌ Tests failed! Blocking deployment.');
                    core.setFailed(`Tests failed with conclusion: ${run.conclusion}`);
                    return;
                  }
                }
              }
              
              console.log('⏳ Tests still running, waiting...');
              await new Promise(resolve => setTimeout(resolve, pollInterval));
            }
            
            console.log('⏰ Timeout waiting for tests');
            core.setFailed('Timeout waiting for test completion');

  web-deploy:
    name: 🎉 Deploy App
    runs-on: ubuntu-latest
    needs: [check-tests, wait-for-tests]
    if: always() && (needs.check-tests.outputs.deployment-allowed == 'true' || needs.wait-for-tests.outputs.tests-passed == 'true')
    environment:
      name: app.production
    env:
      VITE_API_URL: ${{ secrets.API_URL }}
      VITE_APP_URL: ${{ secrets.APP_URL }}

      VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      VITE_SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

      VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
      VITE_STRIPE_PRICE_ID_MONTHLY: ${{ secrets.STRIPE_PRICE_ID_MONTHLY }}
      VITE_STRIPE_PRICE_ID_YEARLY: ${{ secrets.STRIPE_PRICE_ID_YEARLY }}
      VITE_STRIPE_PRICE_ID_LIFETIME: ${{ secrets.STRIPE_PRICE_ID_LIFETIME }}
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: 🚚 Get latest code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}

      - name: 🔨 Build Project
        run: |
          cd app
          npm install
          npm run build

      - name: List output files
        run: find app/dist/ -print

      - name: 📂 Sync files
        id: deploy
        uses: SamKirkland/FTP-Deploy-Action@4.3.3
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: app/dist/

      - name: 🎉 Deployment Success
        if: success()
        run: |
          echo "## 🎉 Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Application deployed successfully to production**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚨 **CRITICAL: Production deployment completed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Quick Links:**" >> $GITHUB_STEP_SUMMARY
          echo "- [View Application](https://eleno.app)" >> $GITHUB_STEP_SUMMARY
          echo "- [Deployment Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: ❌ Deployment Failed
        if: failure()
        run: |
          echo "## ❌ Production Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **CRITICAL: Application deployment to production failed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Failure Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Failure time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚨 **URGENT: Production deployment failure requires immediate attention**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔧 **Immediate Action Required:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Alert DevOps team immediately" >> $GITHUB_STEP_SUMMARY
          echo "2. Check deployment logs for error details" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify production server status and connectivity" >> $GITHUB_STEP_SUMMARY
          echo "4. Consider emergency rollback if necessary" >> $GITHUB_STEP_SUMMARY
          echo "5. Monitor application health and user impact" >> $GITHUB_STEP_SUMMARY
          exit 1

  # Post-deployment health check
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: web-deploy
    if: success()
    steps:
      - name: 🏥 Check production app health
        id: health-check
        run: |
          echo "🔍 Performing critical health check on production application..."
          
          # Wait for deployment to propagate
          sleep 60
          
          # Check if the app is responding
          HEALTH_URL="https://eleno.app"
          
          if curl -f -s --max-time 30 "$HEALTH_URL" > /dev/null; then
            echo "✅ Health check passed - application is responding"
            echo "health-status=healthy" >> $GITHUB_OUTPUT
          else
            echo "❌ Health check failed - application not responding"
            echo "health-status=unhealthy" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Health Check Summary
        run: |
          echo "## 🏥 Post-Deployment Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.health-check.outputs.health-status }}" = "healthy" ]; then
            echo "✅ **Production application is healthy and responding**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 The production deployment completed successfully and the application is fully operational." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor application metrics for the next hour" >> $GITHUB_STEP_SUMMARY
            echo "- Check error rates and performance indicators" >> $GITHUB_STEP_SUMMARY
            echo "- Verify all critical user flows are working" >> $GITHUB_STEP_SUMMARY
          else
            echo "🚨 **CRITICAL: Production application health check failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ The deployment completed but the application is not responding properly." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**IMMEDIATE ACTION REQUIRED:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Alert DevOps team immediately" >> $GITHUB_STEP_SUMMARY
            echo "2. Check server logs and status" >> $GITHUB_STEP_SUMMARY
            echo "3. Verify DNS and CDN configuration" >> $GITHUB_STEP_SUMMARY
            echo "4. Consider emergency rollback" >> $GITHUB_STEP_SUMMARY
            echo "5. Monitor user impact and error reports" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Rollback preparation
  rollback-prepare:
    name: 🔄 Prepare Rollback Info
    runs-on: ubuntu-latest
    needs: [web-deploy, health-check]
    if: always()
    steps:
      - name: 🚚 Checkout code
        uses: actions/checkout@v4

      - name: 📋 Generate rollback information
        run: |
          echo "## 🔄 Rollback Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Current Production Deployment:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment ID**: \`${{ github.run_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get previous successful deployment
          echo "**Previous Deployment (for rollback):**" >> $GITHUB_STEP_SUMMARY
          PREV_COMMIT=$(git log --format="%H" -n 2 | tail -1)
          echo "- **Previous Commit**: [\`$PREV_COMMIT\`](https://github.com/${{ github.repository }}/commit/$PREV_COMMIT)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Rollback Command (if needed):**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# To rollback to previous version:" >> $GITHUB_STEP_SUMMARY
          echo "git checkout $PREV_COMMIT" >> $GITHUB_STEP_SUMMARY
          echo "# Then trigger emergency deployment workflow" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
