# Deploys the api server from [dev] to staging.
# Deployment is blocked if tests fail.
name: 🔌 [STAGING] Deploy server on push dev
on:
  workflow_dispatch:
  push:
    branches:
      - dev
    paths:
      - "api/**"

jobs:
  # PHP Tests and Static Analysis
  php-tests:
    name: 🧪 PHP Tests & Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api
    steps:
      - name: 🚚 Checkout code
        uses: actions/checkout@v3

      - name: 📦 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, intl
          coverage: xdebug

      - name: 📥 Install Composer dependencies
        run: composer install --optimize-autoloader

      - name: 🔧 PHP Code Sniffer
        run: composer phpcs

      - name: 🔍 PHPStan Analysis
        run: composer stan

      # - name: 🧪 Run Pest Tests
      #   run: composer test

      - name: 📊 Generate test summary
        if: always()
        run: |
          echo "## 🧪 PHP Test Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Code style checks passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Static analysis passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Unit tests passed" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: php-tests
    if: success()
    environment:
      name: api.staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, intl

      - name: 📥 Install Composer dependencies (production)
        run: |
          cd api
          composer install --no-dev --optimize-autoloader

      - name: Create .env file
        run: |
          cd api
          echo "APP_BASE_URL=${{ secrets.APP_BASE_URL }}" >> .env

          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env

          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET }}" >> .env
          echo "SUPABASE_SERVICEROLE_KEY=${{ secrets.SUPABASE_SERVICEROLE_KEY }}" >> .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env

          echo "SUPABASE_HOST=${{ secrets.SUPABASE_HOST }}" >> .env
          echo "SUPABASE_PORT=${{ secrets.SUPABASE_PORT }}" >> .env
          echo "SUPABASE_DBNAME=${{ secrets.SUPABASE_DBNAME }}" >> .env
          echo "SUPABASE_USER=${{ secrets.SUPABASE_USER }}" >> .env
          echo "SUPABASE_PASSWORD=${{ secrets.SUPABASE_PASSWORD }}" >> .env

          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_TEST_SECRET_KEY }}" >> .env
          echo "STRIPE_SIGNATURE=${{ secrets.STRIPE_TEST_SIGNATURE }}" >> .env

          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env

          echo "FLUENTCRM_API_URL=${{ secrets.FLUENTCRM_API_URL }}" >> .env
          echo "FLUENTCRM_USERNAME=${{ secrets.FLUENTCRM_USERNAME }}" >> .env
          echo "FLUENTCRM_PASSWORD=\"${{ secrets.FLUENTCRM_PASSWORD }}\"" >> .env
          echo "FLUENTCRM_INTERNAL_API_KEY=${{ secrets.FLUENTCRM_INTERNAL_API_KEY }}" >> .env

          echo "PERSPECTIVE_WEBHOOK_TOKEN=${{ secrets.PERSPECTIVE_WEBHOOK_TOKEN }}" >> .env

      - name: 📂 Deploy to FTP
        id: deploy
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_API_SERVER }}
          username: ${{ secrets.FTP_API_USERNAME }}
          password: ${{ secrets.FTP_API_PASSWORD }}
          local-dir: ./api/

      - name: 🎉 Deployment Success
        if: success()
        run: |
          echo "## 🎉 Staging API Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **API server deployed successfully to staging**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Staging API" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Quick Links:**" >> $GITHUB_STEP_SUMMARY
          echo "- [View API Documentation](https://api-staging.eleno.app)" >> $GITHUB_STEP_SUMMARY
          echo "- [Deployment Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: ❌ Deployment Failed
        if: failure()
        run: |
          echo "## ❌ Staging API Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **API server deployment to staging failed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Failure Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Staging API" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Failure time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔧 **Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the deployment logs above for error details" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify FTP server connectivity and credentials" >> $GITHUB_STEP_SUMMARY
          echo "3. Check PHP dependencies and configuration" >> $GITHUB_STEP_SUMMARY
          echo "4. Ensure all environment variables are properly set" >> $GITHUB_STEP_SUMMARY
          echo "5. Contact DevOps team if issue persists" >> $GITHUB_STEP_SUMMARY
          exit 1

  # Post-deployment health check for API
  api-health-check:
    name: 🏥 API Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: 🏥 Check staging API health
        id: health-check
        run: |
          echo "🔍 Performing health check on staging API..."

          # Wait for deployment to propagate
          sleep 30

          # Check if the API is responding
          API_HEALTH_URL="https://api-staging.eleno.app/health"

          if curl -f -s --max-time 30 "$API_HEALTH_URL" > /dev/null; then
            echo "✅ Health check passed - API is responding"
            echo "health-status=healthy" >> $GITHUB_OUTPUT
          else
            echo "❌ Health check failed - API not responding"
            echo "health-status=unhealthy" >> $GITHUB_OUTPUT
          fi

      - name: 📊 API Health Check Summary
        run: |
          echo "## 🏥 Post-Deployment API Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.health-check.outputs.health-status }}" = "healthy" ]; then
            echo "✅ **Staging API is healthy and responding**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The staging API deployment completed successfully and endpoints are accessible." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Staging API health check failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The deployment completed but the API may not be fully functional." >> $GITHUB_STEP_SUMMARY
            echo "Please investigate the server logs and endpoint status." >> $GITHUB_STEP_SUMMARY
          fi
