name: ðŸ“ˆ Test Performance Monitoring

on:
  workflow_dispatch:
    inputs:
      benchmark_type:
        description: 'Type of benchmark to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit-tests
          - build-speed
          - playwright-tests
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  NODE_VERSION: "22"
  CACHE_VERSION: "v1"

jobs:
  performance-benchmark:
    name: ðŸ“Š Performance Benchmark
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    
    steps:
      - name: ðŸšš Checkout code
        uses: actions/checkout@v4

      - name: ðŸ“¦ Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: ðŸ’¾ Cache node modules
        uses: actions/cache@v4
        with:
          path: app/node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('app/package-lock.json') }}

      - name: ðŸ“¥ Install dependencies
        run: npm ci

      - name: ðŸ§ª Benchmark Unit Tests
        if: inputs.benchmark_type == 'all' || inputs.benchmark_type == 'unit-tests'
        run: |
          echo "## ðŸ§ª Unit Test Performance" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          npm run test:benchmark >> $GITHUB_STEP_SUMMARY 2>&1 || true
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: ðŸ”¨ Benchmark Build Speed
        if: inputs.benchmark_type == 'all' || inputs.benchmark_type == 'build-speed'
        run: |
          echo "## ðŸ”¨ Build Performance" >> $GITHUB_STEP_SUMMARY
          echo "### Staging Build" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          time npm run build:staging >> $GITHUB_STEP_SUMMARY 2>&1 || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Clean and test production build
          rm -rf dist
          echo "### Production Build" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          time npm run build >> $GITHUB_STEP_SUMMARY 2>&1 || true
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: ðŸ’¾ Cache Playwright browsers
        if: inputs.benchmark_type == 'all' || inputs.benchmark_type == 'playwright-tests'
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.CACHE_VERSION }}-${{ hashFiles('app/package-lock.json') }}

      - name: ðŸ“¥ Install Playwright browsers
        if: inputs.benchmark_type == 'all' || inputs.benchmark_type == 'playwright-tests'
        run: npx playwright install --with-deps chromium

      - name: ðŸŽ­ Benchmark Playwright Tests
        if: inputs.benchmark_type == 'all' || inputs.benchmark_type == 'playwright-tests'
        env:
          VITE_ENV: staging
        run: |
          echo "## ðŸŽ­ Playwright Performance" >> $GITHUB_STEP_SUMMARY
          echo "### Basic Performance Tests" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          time npm run pw -- --project='*performance*' --reporter=list >> $GITHUB_STEP_SUMMARY 2>&1 || true
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: ðŸ“Š Cache Performance Analysis
        run: |
          echo "## ðŸ’¾ Cache Analysis" >> $GITHUB_STEP_SUMMARY
          echo "### Node Modules Cache" >> $GITHUB_STEP_SUMMARY
          echo "Size: $(du -sh node_modules 2>/dev/null | cut -f1 || echo 'Not available')" >> $GITHUB_STEP_SUMMARY
          echo "### Playwright Cache" >> $GITHUB_STEP_SUMMARY
          echo "Size: $(du -sh ~/.cache/ms-playwright 2>/dev/null | cut -f1 || echo 'Not available')" >> $GITHUB_STEP_SUMMARY
          echo "### Build Cache" >> $GITHUB_STEP_SUMMARY
          echo "Size: $(du -sh dist 2>/dev/null | cut -f1 || echo 'Not available')" >> $GITHUB_STEP_SUMMARY

      - name: ðŸ“ˆ Performance Summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ðŸ“ˆ Performance Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Benchmark completed for: ${{ inputs.benchmark_type || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js version: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Runner: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY