name: 🚀 Deploy to Production

on:
  push:
    branches: [main]
    paths:
      - "app/**"
      - ".github/workflows/deploy-production.yml"
  workflow_dispatch:

env:
  NODE_VERSION: "22"

jobs:
  # Step 1: Run the same critical tests that run after dev deploy
  # verify-critical-tests:
  #   name: 🧪 Verify Critical Tests Pass
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./app
  #   env:
  #     VITE_ENV: staging
  #     VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL_STAGING }}
  #     VITE_SUPABASE_KEY: ${{ secrets.VITE_SUPABASE_KEY_STAGING }}
  #     VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY_STAGING }}
  #     VITE_API_URL: ${{ secrets.VITE_API_URL_STAGING }}
  #
  #   steps:
  #     - name: 🚚 Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: 📦 Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: "npm"
  #         cache-dependency-path: app/package-lock.json
  #
  #     - name: 📥 Install dependencies
  #       run: npm ci
  #
  #     - name: 📥 Install Playwright browsers
  #       run: npx playwright install --with-deps chromium
  #
  #     - name: 🔍 Verify staging is ready
  #       run: |
  #         echo "Verifying staging environment is accessible..."
  #         curl --fail --retry 5 --retry-delay 5 https://dev.eleno.net || {
  #           echo "::error title=Staging Not Ready::Staging environment is not accessible. Cannot proceed with production deployment."
  #           exit 1
  #         }

  # - name: 🎭 Run critical E2E tests against staging
  #   id: critical-tests
  #   run: |
  #     echo "Running the same critical tests that gate production..."
  #     npm run pw -- \
  #       --project='*cross-browser-critical*' \
  #       --project='*edge-case*' \
  #       tests/share-homework/share-homework.spec.ts
  #
  # - name: 📤 Upload test results
  #   if: always()
  #   uses: actions/upload-artifact@v4
  #   with:
  #     name: production-gate-tests-${{ github.run_id }}
  #     path: |
  #       app/playwright-report/
  #       app/test-results/
  #     retention-days: 30
  #
  # - name: 📊 Test Results
  #   if: always()
  #   run: |
  #     echo "## 🧪 Production Gate Test Results" >> $GITHUB_STEP_SUMMARY
  #     if [ "${{ steps.critical-tests.outcome }}" = "success" ]; then
  #       echo "✅ All critical tests passed! Safe to deploy to production." >> $GITHUB_STEP_SUMMARY
  #       echo "- ✅ Authentication verified" >> $GITHUB_STEP_SUMMARY
  #       echo "- ✅ Core functionality working" >> $GITHUB_STEP_SUMMARY
  #       echo "- ✅ Visual regression tests passed" >> $GITHUB_STEP_SUMMARY
  #       echo "- ✅ Share homework feature verified" >> $GITHUB_STEP_SUMMARY
  #     else
  #       echo "❌ Critical tests failed! Production deployment blocked." >> $GITHUB_STEP_SUMMARY
  #       echo "**Fix these issues before deploying to production:**" >> $GITHUB_STEP_SUMMARY
  #       echo "- Review [test artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
  #       echo "- Fix in dev branch first" >> $GITHUB_STEP_SUMMARY
  #       echo "- Re-run dev → staging → test cycle" >> $GITHUB_STEP_SUMMARY
  #       exit 1
  #     fi

  # Step 2: Deploy to production (only if tests pass)
  deploy-production:
    name: 🚀 Deploy to Production
    # needs: verify-critical-tests
    runs-on: ubuntu-latest
    environment:
      name: app.production
      url: https://app.eleno.net
    env:
      VITE_API_URL: ${{ secrets.API_URL }}
      VITE_APP_URL: ${{ secrets.APP_URL }}

      VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      VITE_SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

      VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
      VITE_STRIPE_PRICE_ID_MONTHLY: ${{ secrets.STRIPE_PRICE_ID_MONTHLY }}
      VITE_STRIPE_PRICE_ID_YEARLY: ${{ secrets.STRIPE_PRICE_ID_YEARLY }}
      VITE_STRIPE_PRICE_ID_LIFETIME: ${{ secrets.STRIPE_PRICE_ID_LIFETIME }}

    steps:
      - name: 🚚 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: app/package-lock.json

      - name: 📥 Install dependencies
        working-directory: ./app
        run: npm ci

      - name: 🔨 Build for production
        working-directory: ./app
        run: npm run build

      - name: 📂 Sync files
        id: deploy
        uses: SamKirkland/FTP-Deploy-Action@4.3.3
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: app/dist/

      - name: 📋 Deployment Summary
        run: |
          echo "## 🚀 Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully deployed to https://app.eleno.net" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Production Site](https://app.eleno.net)" >> $GITHUB_STEP_SUMMARY

  # Step 3: Smoke test production
  smoke-test:
    name: 💨 Production Smoke Test
    needs: deploy-production
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
      - name: 🚚 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: app/package-lock.json

      - name: 📥 Install dependencies
        run: npm ci

      - name: ⏳ Wait for production deployment
        run: |
          echo "Waiting for production deployment to be ready..."
          sleep 60

      - name: 💨 Basic smoke tests
        id: smoke-tests
        run: |
          echo "Running basic smoke tests on production..."

          # Test 1: Can the app load?
          echo "🔍 Testing app loads..."
          curl --fail --retry 10 --retry-delay 5 https://app.eleno.net || {
            echo "::error::Production app failed to load"
            exit 1
          }

          # Test 2: Check critical pages return 200
          echo "🔍 Testing critical pages..."
          curl --fail -s https://app.eleno.net/login > /dev/null || {
            echo "::error::Login page not accessible"
            exit 1
          }

          # Test 3: Check if JS/CSS assets load (basic check)
          echo "🔍 Testing assets load..."
          curl --fail -s https://app.eleno.net | grep -q "script\|link" || {
            echo "::error::Assets may not be loading properly"
            exit 1
          }

          echo "✅ All smoke tests passed!"

      - name: 📊 Smoke Test Results
        if: always()
        run: |
          echo "## 💨 Production Smoke Test Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.smoke-tests.outcome }}" = "success" ]; then
            echo "✅ Production deployment verified!" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ App loads successfully" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Critical pages accessible" >> $GITHUB_STEP_SUMMARY  
            echo "- ✅ Assets loading properly" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Production is live and healthy!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Smoke tests failed!" >> $GITHUB_STEP_SUMMARY
            echo "**Production may have issues - investigate immediately**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🚨 Alert on smoke test failure
        if: failure()
        run: |
          echo "::error title=Production Smoke Test Failed::Production deployment may have issues. Please investigate immediately."

  # Final summary
  # summary:
  #   name: 📋 Production Deployment Summary
  #   needs: [verify-critical-tests, deploy-production, smoke-test]
  #   if: always()
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: 📋 Overall Summary
  #       run: |
  #         echo "# 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
  #         echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
  #         echo "| 🧪 Critical Tests | ${{ needs.verify-critical-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
  #         echo "| 🚀 Production Deploy | ${{ needs.deploy-production.result == 'success' && '✅ Deployed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
  #         echo "| 💨 Smoke Test | ${{ needs.smoke-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #
  #         if [ "${{ needs.verify-critical-tests.result }}" = "success" ] && [ "${{ needs.deploy-production.result }}" = "success" ] && [ "${{ needs.smoke-test.result }}" = "success" ]; then
  #           echo "🎉 **SUCCESS**: Production deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
  #           echo "🔗 **Live Site**: https://app.eleno.net" >> $GITHUB_STEP_SUMMARY
  #         else
  #           echo "⚠️ **ISSUES DETECTED**: Some steps failed. Please review above." >> $GITHUB_STEP_SUMMARY
  #         fi
  #

