name: 📈 PR Coverage Report

on:
  # pull_request:
  #   branches: [main, dev]
  #   paths:
  #     - "app/**"
  #   types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "22"

jobs:
  coverage-comparison:
    name: 📈 Coverage Comparison
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
        
    steps:
      - name: 🚚 Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run tests with coverage (PR branch)
        run: npm run test:cov

      - name: 🎯 Check PR coverage thresholds
        id: pr-coverage-check
        run: node scripts/check-coverage-thresholds.js
        continue-on-error: true
        
      - name: 🎨 Generate PR coverage badges
        run: node scripts/generate-coverage-badges.js

      - name: 💾 Save PR coverage
        run: |
          cp coverage/coverage-summary.json pr-coverage.json
          node scripts/generate-test-summary.js coverage > pr-coverage-data.json
          if [ -f coverage/badges.json ]; then
            cp coverage/badges.json pr-badges.json
          fi

      - name: 🔄 Checkout base branch
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout origin/${{ github.base_ref }}

      - name: 📥 Install dependencies (base)
        run: npm ci

      - name: 🧪 Run tests with coverage (base branch)
        run: npm run test:cov
        continue-on-error: true

      - name: 🎯 Check base coverage thresholds
        id: base-coverage-check
        run: node scripts/check-coverage-thresholds.js
        continue-on-error: true
        
      - name: 💾 Save base coverage
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            cp coverage/coverage-summary.json base-coverage.json
            node scripts/generate-test-summary.js coverage > base-coverage-data.json
          else
            echo '{"total":{"statements":{"pct":0},"branches":{"pct":0},"functions":{"pct":0},"lines":{"pct":0}}}' > base-coverage.json
            echo '{"summary":{"statements":{"percentage":0},"branches":{"percentage":0},"functions":{"percentage":0},"lines":{"percentage":0}}}' > base-coverage-data.json
          fi

      - name: 📊 Generate coverage comparison
        run: |
          # Create comparison script
          cat > compare-coverage.js << 'EOF'
          const fs = require('fs');
          
          const prCoverage = JSON.parse(fs.readFileSync('pr-coverage.json', 'utf8'));
          const baseCoverage = JSON.parse(fs.readFileSync('base-coverage.json', 'utf8'));
          
          const prData = JSON.parse(fs.readFileSync('pr-coverage-data.json', 'utf8'));
          const baseData = JSON.parse(fs.readFileSync('base-coverage-data.json', 'utf8'));
          
          function getDiff(current, base) {
            const diff = current - base;
            if (diff > 0) return `+${diff.toFixed(2)}%`;
            if (diff < 0) return `${diff.toFixed(2)}%`;
            return '±0.00%';
          }
          
          function getEmoji(current, base) {
            const diff = current - base;
            if (diff > 1) return '🟢';
            if (diff > 0) return '✅';
            if (diff < -1) return '🔴';
            if (diff < 0) return '🟡';
            return '⚪';
          }
          
          function getThresholdStatus(value, threshold) {
            if (value >= threshold) return '✅';
            if (value >= threshold - 5) return '⚠️';
            return '❌';
          }
          
          console.log('## 📈 Coverage Comparison Report');
          console.log('');
          
          // Threshold status summary
          const thresholds = { statements: 80, branches: 80, functions: 80, lines: 80 };
          const prStatus = '${{ steps.pr-coverage-check.outcome }}' === 'success' ? '✅ PASSED' : '❌ FAILED';
          const baseStatus = '${{ steps.base-coverage-check.outcome }}' === 'success' ? '✅ PASSED' : '❌ FAILED';
          
          console.log(`**🎯 Quality Gate Status**: ${prStatus}`);
          console.log('');
          
          console.log('| Metric | Base | PR | Change | Threshold | Status |');
          console.log('|--------|------|----|---------|-----------| -------|');
          
          const metrics = ['statements', 'branches', 'functions', 'lines'];
          
          metrics.forEach(metric => {
            const basePct = baseCoverage.total[metric].pct;
            const prPct = prCoverage.total[metric].pct;
            const diff = getDiff(prPct, basePct);
            const emoji = getEmoji(prPct, basePct);
            const threshold = thresholds[metric];
            const thresholdStatus = getThresholdStatus(prPct, threshold);
            
            console.log(`| ${metric.charAt(0).toUpperCase() + metric.slice(1)} | ${basePct.toFixed(2)}% | ${prPct.toFixed(2)}% | ${diff} | ${threshold}% | ${emoji} ${thresholdStatus} |`);
          });
          
          console.log('');
          
          // Overall assessment
          const overallDiff = prCoverage.total.lines.pct - baseCoverage.total.lines.pct;
          const prMeetsThresholds = prStatus.includes('PASSED');
          
          if (prMeetsThresholds && overallDiff > 1) {
            console.log('🎉 **Excellent!** Coverage improved significantly and meets all thresholds.');
          } else if (prMeetsThresholds && overallDiff >= 0) {
            console.log('✅ **Good!** Coverage meets thresholds and maintained/improved.');
          } else if (prMeetsThresholds) {
            console.log('✅ **Acceptable** Coverage meets thresholds despite slight decrease.');
          } else if (overallDiff > 0) {
            console.log('🟡 **Warning** Coverage improved but still below thresholds. Please add more tests.');
          } else {
            console.log('🔴 **Alert** Coverage below thresholds and decreasing. Please add comprehensive tests.');
          }
          
          console.log('');
          console.log('### 🎯 Threshold Requirements');
          console.log('- **Global Minimum**: 80% for all metrics');
          console.log('- **Critical Paths**: 90% (API services, utilities)');
          console.log('- **Business Logic**: 85% (hooks, context providers)');
          console.log('- **UI Components**: 60% (presentational components)');
          EOF
          
          node compare-coverage.js > coverage-comparison.md

      - name: 📤 Upload coverage comparison
        uses: actions/upload-artifact@v4
        with:
          name: coverage-comparison-${{ github.run_id }}
          path: |
            app/coverage-comparison.md
            app/pr-coverage.json
            app/base-coverage.json
          retention-days: 30

      - name: 💬 Comment PR with coverage
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './app/coverage-comparison.md';
            
            if (fs.existsSync(path)) {
              const coverageReport = fs.readFileSync(path, 'utf8');
              
              const body = `# 📊 Test Coverage Report
              
              ${coverageReport}
              
              ---
              
              **📦 Artifacts Available:**
              - [Coverage Comparison Data](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)
              - [Full Coverage Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)
              
              *This report was automatically generated for commit ${{ github.event.pull_request.head.sha }}*`;
              
              // Find existing coverage comment
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const existingComment = comments.data.find(comment => 
                comment.body.includes('# 📊 Test Coverage Report')
              );
              
              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: body
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                });
              }
            }

      - name: 📋 Summary
        run: |
          echo "## 📈 PR Coverage Report Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Coverage comparison between base branch (\`${{ github.base_ref }}\`) and PR branch has been generated." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f coverage-comparison.md ]; then
            cat coverage-comparison.md >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Review the coverage changes above" >> $GITHUB_STEP_SUMMARY
          echo "- Check the PR comment for detailed information" >> $GITHUB_STEP_SUMMARY
          echo "- Download artifacts for detailed coverage reports" >> $GITHUB_STEP_SUMMARY