name: 🚀 Test & Deploy to Staging

on:
  push:
    branches: [dev]
    paths:
      - "app/**"
      - ".github/workflows/test-and-deploy-dev.yml"
  workflow_dispatch:

env:
  NODE_VERSION: "22"

jobs:
  # Step 1: Quick unit tests and checks
  quick-tests:
    name: 🧪 Unit Tests & Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
      - name: 🚚 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: app/package-lock.json

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔧 Type check
        run: npm run typecheck

      - name: 🧹 Lint check (Biome)
        run: npx biome check --max-diagnostics=50 || true

      - name: 🧪 Run unit tests
        run: npm test -- --run

      - name: 📊 Test Summary
        if: always()
        run: |
          echo "## 🧪 Quick Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Unit tests and checks completed" >> $GITHUB_STEP_SUMMARY

  # Step 2: Deploy to staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    needs: quick-tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    environment:
      name: app.staging
    env:
      VITE_API_URL: ${{ secrets.API_URL }}
      VITE_APP_URL: ${{ secrets.APP_URL }}

      VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      VITE_SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

      VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
      VITE_STRIPE_PRICE_ID_MONTHLY: ${{ secrets.STRIPE_PRICE_ID_MONTHLY }}
      VITE_STRIPE_PRICE_ID_YEARLY: ${{ secrets.STRIPE_PRICE_ID_YEARLY }}
      VITE_STRIPE_PRICE_ID_LIFETIME: ${{ secrets.STRIPE_PRICE_ID_LIFETIME }}
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: 🚚 Get latest code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}

      - name: 🔨 Build Project
        run: |
          cd app
          npm install
          npm run build:staging

      - name: List output files
        run: find app/dist/ -print

      - name: 📂 Sync files
        id: deploy
        uses: SamKirkland/FTP-Deploy-Action@4.3.3
        with:
          server: ${{ secrets.FTP_APP_SERVER }}
          username: ${{ secrets.FTP_APP_USERNAME }}
          password: ${{ secrets.FTP_APP_PASSWORD }}
          local-dir: app/dist/

      - name: 🎉 Deployment Success
        if: success()
        run: |
          echo "## 🎉 Staging Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Application deployed successfully to staging**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Quick Links:**" >> $GITHUB_STEP_SUMMARY
          echo "- [View Application](https://staging.eleno.app)" >> $GITHUB_STEP_SUMMARY
          echo "- [Deployment Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: ❌ Deployment Failed
        if: failure()
        run: |
          echo "## ❌ Staging Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Application deployment to staging failed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Failure Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Failure time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔧 **Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the deployment logs above for error details" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify FTP server connectivity and credentials" >> $GITHUB_STEP_SUMMARY
          echo "3. Check build artifacts were created successfully" >> $GITHUB_STEP_SUMMARY
          echo "4. Contact DevOps team if issue persists" >> $GITHUB_STEP_SUMMARY
          exit 1
  # Step 3: Run critical E2E tests against staging
  critical-e2e-tests:
    name: 🎭 Critical E2E Tests
    needs: deploy-staging
    runs-on: ubuntu-latest
    continue-on-error: true # Don't block further development if tests fail
    environment:
      name: app.staging
    defaults:
      run:
        working-directory: ./app
    env:
      VITE_ENV: staging
      VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      VITE_SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
      VITE_API_URL: ${{ secrets.API_URL }}
      
      # Test environment variables needed for E2E test utilities
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}

    steps:
      - name: 🚚 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: app/package-lock.json

      - name: 📥 Install dependencies
        run: npm ci

      - name: 📥 Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: ⏳ Wait for deployment to be ready
        run: |
          echo "Waiting for staging deployment to be fully ready..."
          sleep 30
          curl --retry 10 --retry-delay 5 --retry-all-errors -I https://dev.eleno.net

      - name: 🎭 Run critical E2E tests
        id: e2e-tests
        run: |
          # Run share-homework test
          npm run pw -- --project=share-homework
          
          # Run critical cross-browser tests
          npm run pw -- \
            --project=cross-browser-critical-chromium \
            --project=cross-browser-critical-firefox \
            --project=cross-browser-critical-webkit
          
          # Run select edge-case tests
          npm run pw -- \
            --project=edge-case-iphone-xr \
            --project=edge-case-standard-laptop
        continue-on-error: true

      - name: 📤 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: critical-test-results-${{ github.run_id }}
          path: |
            app/playwright-report/
            app/test-results/
          retention-days: 7

      - name: 📊 Test Results Summary
        if: always()
        run: |
          echo "## 🎭 Critical E2E Test Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.e2e-tests.outcome }}" = "success" ]; then
            echo "✅ All critical tests passed!" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Authentication working" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Core functionality verified" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Visual regression tests passed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Share homework feature working" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Some critical tests failed" >> $GITHUB_STEP_SUMMARY
            echo "**This doesn't block development, but please review:**" >> $GITHUB_STEP_SUMMARY
            echo "- Check [test artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
            echo "- Fix issues in next commit" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 💬 Notify on failure
        if: failure() && steps.e2e-tests.outcome == 'failure'
        run: |
          echo "::warning title=Critical E2E Tests Failed::Some critical tests failed on staging. Please review the test results."

  # Final summary
  summary:
    name: 📋 Pipeline Summary
    needs: [quick-tests, deploy-staging, critical-e2e-tests]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: 📋 Overall Summary
        run: |
          echo "# 🚀 Dev → Staging Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Unit Tests | ${{ needs.quick-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Staging Deploy | ${{ needs.deploy-staging.result == 'success' && '✅ Deployed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎭 Critical E2E | ${{ needs.critical-e2e-tests.result == 'success' && '✅ Passed' || '⚠️ Failed (non-blocking)' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Staging URL**: https://dev.eleno.net" >> $GITHUB_STEP_SUMMARY

